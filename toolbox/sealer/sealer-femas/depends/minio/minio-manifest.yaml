---
apiVersion: v1
kind: Namespace
metadata:
  name: minio-system
  labels:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: my-minio
---
# Source: minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-minio
  namespace: minio-system
  labels:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: my-minio
secrets:
  - name: my-minio
---
# Source: minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-minio
  namespace: minio-system
  labels:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: my-minio
type: Opaque
data:
  access-key: "41YJ80G95A85DUQDOFX9"
  secret-key: "bWN6yMImn8rRFlFjxv3amw3fy9lzWsvgOYFcHdyK"
  key.json: ""
---
# Source: minio/templates/distributed/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-minio-headless
  namespace: minio-system
  labels:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: my-minio
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: minio
      port: 9000
      targetPort: minio
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: my-minio
---
# Source: minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-minio
  namespace: minio-system
  labels:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: my-minio
spec:
  type: ClusterIP
  ports:
    - name: minio
      port: 9000
      targetPort: minio
  selector:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: my-minio
---
# Source: minio/templates/distributed/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-minio
  namespace: minio-system
  labels:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: my-minio
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: my-minio
  serviceName: my-minio-headless
  replicas: 4
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
        app.kubernetes.io/instance: my-minio
      annotations:
        checksum/credentials-secret: c4c5a5e63b2425f9d7d8ca67d4be0e3440afe5645e4c98c6eb1683c1f9676870
    spec:
      serviceAccountName: my-minio
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: minio
                    app.kubernetes.io/instance: my-minio
                namespaces:
                  - "minio-system"
                topologyKey: kubernetes.io/hostname
              weight: 1
      securityContext:
        fsGroup: 1001
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2021.6.17-debian-10-r38
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_DISTRIBUTED_MODE_ENABLED
              value: "yes"
            - name: MINIO_DISTRIBUTED_NODES
              value: "my-minio-{0...3}.my-minio-headless.minio-system.svc.cluster.local/data"
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: my-minio
                  key: access-key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: my-minio
                  key: secret-key
            - name: MINIO_SKIP_CLIENT
              value: "yes"
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
          ports:
            - name: minio
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: { }
            requests: { }
          volumeMounts:
            - name: data
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: minio
          app.kubernetes.io/instance: my-minio
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "80Gi"
        storageClassName: local-hostpath
